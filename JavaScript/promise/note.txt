promise有三个状态：pending(进行中) fulfilled(已成功) rejected(已失效)

const promise = new Promise(function(resolve, reject) {
  // ... some code

  if (/* 异步操作成功 */){
    resolve(value);
  } else {
    reject(error);
  }
});
使用then()指定resolve和reject的回调
promise.then(function(value) {
  // success
}, function(error) {
  // failure
});

Promise 新建后就会立即执行。

getJSON("/post/1.json")
    .then(function(post) {
        return getJSON(post.commentURL);
    })
    .then(function funcA(comments) {
        console.log("resolved: ", comments);
    }, function funcB(err){
        console.log("rejected: ", err);
    });

采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。

Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。
Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。即catch可以捕获前面多个promise的错误。